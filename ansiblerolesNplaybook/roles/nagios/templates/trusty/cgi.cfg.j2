#################################################################
#
# CGI.CFG - Sample CGI Configuration File for Nagios 
#
#################################################################


# MAIN CONFIGURATION FILE
# This tells the CGIs where to find your main configuration file.
# The CGIs will read the main and host config files for any other
# data they might need.

main_config_file={{ nagios_config_file }}



# PHYSICAL HTML PATH
# This is the path where the HTML files for Nagios reside.  This
# value is used to locate the logo images needed by the statusmap
# and statuswrl CGIs.

physical_html_path={{ nagios_cgi_physical_html_path }}



# URL HTML PATH
# This is the path portion of the URL that corresponds to the
# physical location of the Nagios HTML files (as defined above).
# This value is used by the CGIs to locate the online documentation
# and graphics.  If you access the Nagios pages with an URL like
# http://www.myhost.com/nagios, this value should be '/nagios'
# (without the quotes).

url_html_path={{ nagios_cgi_url_html_path }}



# CONTEXT-SENSITIVE HELP
# This option determines whether or not a context-sensitive
# help icon will be displayed for most of the CGIs.
# Values: 0 = disables context-sensitive help
#         1 = enables context-sensitive help

show_context_help={{ nagios_cgi_show_context_help }}



# PENDING STATES OPTION
# This option determines what states should be displayed in the web
# interface for hosts/services that have not yet been checked.
# Values: 0 = leave hosts/services that have not been check yet in their original state
#         1 = mark hosts/services that have not been checked yet as PENDING

use_pending_states={{ nagios_cgi_use_pending_states }}

# NAGIOS PROCESS CHECK COMMAND
# This is the full path and filename of the program used to check
# the status of the Nagios process.  It is used only by the CGIs
# and is completely optional.  However, if you don't use it, you'll
# see warning messages in the CGIs about the Nagios process
# not running and you won't be able to execute any commands from
# the web interface.  The program should follow the same rules
# as plugins; the return codes are the same as for the plugins,
# it should have timeout protection, it should output something
# to STDIO, etc.
#
# Note: The command line for the check_nagios plugin below may
# have to be tweaked a bit, as different versions of the plugin
# use different command line arguments/syntaxes.

nagios_check_command={{ nagios_cgi_nagios_check_command }}


# AUTHENTICATION USAGE
# This option controls whether or not the CGIs will use any 
# authentication when displaying host and service information, as
# well as committing commands to Nagios for processing.  
#
# Read the HTML documentation to learn how the authorization works!
#
# NOTE: It is a really *bad* idea to disable authorization, unless
# you plan on removing the command CGI (cmd.cgi)!  Failure to do
# so will leave you wide open to kiddies messing with Nagios and
# possibly hitting you with a denial of service attack by filling up
# your drive by continuously writing to your command file!
#
# Setting this value to 0 will cause the CGIs to *not* use
# authentication (bad idea), while any other value will make them
# use the authentication functions (the default).

use_authentication={{ nagios_cgi_use_authentication }}




# x509 CERT AUTHENTICATION
# When enabled, this option allows you to use x509 cert (SSL)
# authentication in the CGIs.  This is an advanced option and should
# not be enabled unless you know what you're doing.

use_ssl_authentication={{ nagios_cgi_use_ssl_authentication }}




# DEFAULT USER
# Setting this variable will define a default user name that can
# access pages without authentication.  This allows people within a
# secure domain (i.e., behind a firewall) to see the current status
# without authenticating.  You may want to use this to avoid basic
# authentication if you are not using a secure server since basic
# authentication transmits passwords in the clear.
#
# Important:  Do not define a default username unless you are
# running a secure web server and are sure that everyone who has
# access to the CGIs has been authenticated in some manner!  If you
# define this variable, anyone who has not authenticated to the web
# server will inherit all rights you assign to this user!
 
{% if not nagios_cgi_default_user_name %}
#default_user_name=guest
{% else %}
default_user_name={{ nagios_cgi_default_user_name }}
{% endif %}



# SYSTEM/PROCESS INFORMATION ACCESS
# This option is a comma-delimited list of all usernames that
# have access to viewing the Nagios process information as
# provided by the Extended Information CGI (extinfo.cgi).  By
# default, *no one* has access to this unless you choose to
# not use authorization.  You may use an asterisk (*) to
# authorize any user who has authenticated to the web server.

authorized_for_system_information={{ nagios_cgi_authorized_for_system_information }}



# CONFIGURATION INFORMATION ACCESS
# This option is a comma-delimited list of all usernames that
# can view ALL configuration information (hosts, commands, etc).
# By default, users can only view configuration information
# for the hosts and services they are contacts for. You may use
# an asterisk (*) to authorize any user who has authenticated
# to the web server.

authorized_for_configuration_information={{ nagios_cgi_authorized_for_configuration_information }}



# SYSTEM/PROCESS COMMAND ACCESS
# This option is a comma-delimited list of all usernames that
# can issue shutdown and restart commands to Nagios via the
# command CGI (cmd.cgi).  Users in this list can also change
# the program mode to active or standby. By default, *no one*
# has access to this unless you choose to not use authorization.
# You may use an asterisk (*) to authorize any user who has
# authenticated to the web server.

authorized_for_system_commands={{ nagios_cgi_authorized_for_system_commands }}



# GLOBAL HOST/SERVICE VIEW ACCESS
# These two options are comma-delimited lists of all usernames that
# can view information for all hosts and services that are being
# monitored.  By default, users can only view information
# for hosts or services that they are contacts for (unless you
# you choose to not use authorization). You may use an asterisk (*)
# to authorize any user who has authenticated to the web server.


authorized_for_all_services={{ nagios_cgi_authorized_for_all_services }}
authorized_for_all_hosts={{ nagios_cgi_authorized_for_all_hosts }}



# GLOBAL HOST/SERVICE COMMAND ACCESS
# These two options are comma-delimited lists of all usernames that
# can issue host or service related commands via the command
# CGI (cmd.cgi) for all hosts and services that are being monitored. 
# By default, users can only issue commands for hosts or services 
# that they are contacts for (unless you you choose to not use 
# authorization).  You may use an asterisk (*) to authorize any
# user who has authenticated to the web server.

authorized_for_all_service_commands={{ nagios_cgi_authorized_for_all_service_commands }}
authorized_for_all_host_commands={{ nagios_cgi_authorized_for_all_host_commands }}



# READ-ONLY USERS
# A comma-delimited list of usernames that have read-only rights in
# the CGIs.  This will block any service or host commands normally shown
# on the extinfo CGI pages.  It will also block comments from being shown
# to read-only users.

{% if not nagios_cgi_authorized_for_read_only %}
#authorized_for_read_only=user1,user2
{% else %}
authorized_for_read_only={{ nagios_cgi_authorized_for_read_only }}
{% endif %}




# STATUSMAP BACKGROUND IMAGE
# This option allows you to specify an image to be used as a 
# background in the statusmap CGI.  It is assumed that the image
# resides in the HTML images path (i.e. /usr/local/nagios/share/images).
# This path is automatically determined by appending "/images"
# to the path specified by the 'physical_html_path' directive.
# Note:  The image file may be in GIF, PNG, JPEG, or GD2 format.
# However, I recommend that you convert your image to GD2 format
# (uncompressed), as this will cause less CPU load when the CGI
# generates the image.

{% if not nagios_cgi_statusmap_background_image %}
#statusmap_background_image=smbackground.gd2
{% else %}
statusmap_background_image={{ nagios_cgi_statusmap_background_image }}
{% endif %}




# STATUSMAP TRANSPARENCY INDEX COLOR
# These options set the r,g,b values of the background color used the statusmap CGI,
# so normal browsers that can't show real png transparency set the desired color as
# a background color instead (to make it look pretty).  
# Defaults to white: (R,G,B) = (255,255,255).

{% if nagios_cgi_color_transparency_index_r == 255 %}
#color_transparency_index_r=255
{% else %}
color_transparency_index_r={{ nagios_cgi_color_transparency_index_r }}
{% endif %}
{% if nagios_cgi_color_transparency_index_g == 255 %}
#color_transparency_index_g=255
{% else %}
color_transparency_index_g={{ nagios_cgi_color_transparency_index_g }}
{% endif %}
{% if nagios_cgi_color_transparency_index_b == 255 %}
#color_transparency_index_b=255
{% else %}
color_transparency_index_b={{ nagios_cgi_color_transparency_index_b }}
{% endif %}




# DEFAULT STATUSMAP LAYOUT METHOD
# This option allows you to specify the default layout method
# the statusmap CGI should use for drawing hosts.  If you do
# not use this option, the default is to use user-defined
# coordinates.  Valid options are as follows:
#	0 = User-defined coordinates
#	1 = Depth layers
#       2 = Collapsed tree
#       3 = Balanced tree
#       4 = Circular
#       5 = Circular (Marked Up)

default_statusmap_layout={{ nagios_cgi_default_statusmap_layout }}



# DEFAULT STATUSWRL LAYOUT METHOD
# This option allows you to specify the default layout method
# the statuswrl (VRML) CGI should use for drawing hosts.  If you
# do not use this option, the default is to use user-defined
# coordinates.  Valid options are as follows:
#	0 = User-defined coordinates
#       2 = Collapsed tree
#       3 = Balanced tree
#       4 = Circular

default_statuswrl_layout={{ nagios_cgi_default_statuswrl_layout }}



# STATUSWRL INCLUDE
# This option allows you to include your own objects in the 
# generated VRML world.  It is assumed that the file
# resides in the HTML path (i.e. /usr/local/nagios/share).

{% if not nagios_cgi_statuswrl_include %}
#statuswrl_include=myworld.wrl
{% else %}
statuswrl_include={{ nagios_cgi_statuswrl_include }}
{% endif %}



# PING SYNTAX
# This option determines what syntax should be used when
# attempting to ping a host from the WAP interface (using
# the statuswml CGI.  You must include the full path to
# the ping binary, along with all required options.  The
# $HOSTADDRESS$ macro is substituted with the address of
# the host before the command is executed.
# Please note that the syntax for the ping binary is
# notorious for being different on virtually ever *NIX
# OS and distribution, so you may have to tweak this to
# work on your system.

ping_syntax={{ nagios_cgi_ping_syntax }}



# REFRESH RATE
# This option allows you to specify the refresh rate in seconds
# of various CGIs (status, statusmap, extinfo, and outages).  

refresh_rate={{ nagios_cgi_refresh_rate }}

# DEFAULT PAGE LIMIT
# This option allows you to specify the default number of results 
# displayed on the status.cgi.  This number can be adjusted from
# within the UI after the initial page load. Setting this to 0
# will show all results.  

result_limit={{ nagios_cgi_result_limit }}


# ESCAPE HTML TAGS
# This option determines whether HTML tags in host and service
# status output is escaped in the web interface.  If enabled,
# your plugin output will not be able to contain clickable links.

escape_html_tags={{ nagios_cgi_escape_html_tags }}




# SOUND OPTIONS
# These options allow you to specify an optional audio file
# that should be played in your browser window when there are
# problems on the network.  The audio files are used only in
# the status CGI.  Only the sound for the most critical problem
# will be played.  Order of importance (higher to lower) is as
# follows: unreachable hosts, down hosts, critical services,
# warning services, and unknown services. If there are no
# visible problems, the sound file optionally specified by
# 'normal_sound' variable will be played.
#
#
# <varname>=<sound_file>
#
# Note: All audio files must be placed in the /media subdirectory
# under the HTML path (i.e. /usr/local/nagios/share/media/).

{% if not nagios_cgi_host_unreachable_sound %}
#host_unreachable_sound=hostdown.wav
{% else %}
host_unreachable_sound={{ nagios_cgi_host_unreachable_sound }}
{% endif %}
{% if not nagios_cgi_host_down_sound %}
#host_down_sound=hostdown.wav
{% else %}
host_down_sound={{ nagios_cgi_host_down_sound }}
{% endif %}
{% if not nagios_cgi_service_critical_sound %}
#service_critical_sound=critical.wav
{% else %}
service_critical_sound={{ nagios_cgi_service_critical_sound }}
{% endif %}
{% if not nagios_cgi_service_warning_sound %}
#service_warning_sound=warning.wav
{% else %}
service_warning_sound={{ nagios_cgi_service_warning_sound }}
{% endif %}
{% if not nagios_cgi_service_unknown_sound %}
#service_unknown_sound=warning.wav
{% else %}
service_unknown_sound={{ nagios_cgi_service_unknown_sound }}
{% endif %}
{% if not nagios_cgi_normal_sound %}
#normal_sound=noproblem.wav
{% else %}
normal_sound={{ nagios_cgi_normal_sound }}
{% endif %}



# URL TARGET FRAMES
# These options determine the target frames in which notes and 
# action URLs will open.

action_url_target={{ nagios_cgi_action_url_target }}
notes_url_target={{ nagios_cgi_notes_url_target }}




# LOCK AUTHOR NAMES OPTION
# This option determines whether users can change the author name 
# when submitting comments, scheduling downtime.  If disabled, the 
# author names will be locked into their contact name, as defined in Nagios.
# Values: 0 = allow editing author names
#         1 = lock author names (disallow editing)

lock_author_names={{ nagios_cgi_lock_author_names }}




# SPLUNK INTEGRATION OPTIONS
# These options allow you to enable integration with Splunk
# in the web interface.  If enabled, you'll be presented with
# "Splunk It" links in various places in the CGIs (log file,
# alert history, host/service detail, etc).  Useful if you're
# trying to research why a particular problem occurred.
# For more information on Splunk, visit http://www.splunk.com/

# This option determines whether the Splunk integration is enabled
# Values: 0 = disable Splunk integration
#         1 = enable Splunk integration

{% if not nagios_cgi_enable_splunk_integration %}
#enable_splunk_integration=1
{% else %}
enable_splunk_integration={{ nagios_cgi_enable_splunk_integration }}
{% endif %}


# This option should be the URL used to access your instance of Splunk

{% if not nagios_cgi_splunk_url %}
#splunk_url=http://127.0.0.1:8000/
{% else %}
splunk_url={{ nagios_cgi_splunk_url }}
{% endif %}



